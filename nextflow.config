includeConfig './conf/base.config'

params {
    
    // FASTA files (fasta, fasta.gz) for the assemblies to QC
    //
    // Pattern:               [["tag", "file path"]]
    // Permissible tags:      tag, tag_1, tag_tag2_3, tag_tag2_tag3;
    //                        Any name with alphanumeric characters including "_".
    //                        "." is not allowed in the tag name
    //                        Unique, short tags are recommended.
    //                        Otherwise, some of the plots in the report may not display correctly.
    // Examples:
    // target_assemblies    = [["tag1", "./a/relative/path/to/the/fasta/file.fasta"],
    //                          ["tag2", "./a/relative/path/to/the/fasta/file2.fasta"],
    //                          ["tag3", "https://ftp.ncbi.nlm.nih.gov/genomes/test_genome.fna"], ...]
    // target_assemblies    = [["tair10", "/an/absolute/path/to/the/fasta/file.fasta"]]
    target_assemblies       = [
        ["hap1", "/workspace/assembly_qc/test_data/default/test_data1.fasta.gz"],
        ["hap2", "/workspace/assembly_qc/test_data/default/test_data2.fasta"]
    ]

    // GFF3 files (gff3, gff3.gz) for the assemblies to QC
    //
    // Optional             Set to [] if not needed such as assembly_gff3 = []
    //
    // Not all assembly gff3 files have to be provided such as:
    // assembly_gff3        = [["hap1", "/workspace/assembly_qc/test_data/default/test_data1.gff3"]]
    //
    // Each gff3 file should have an associated (by tag) fasta file in target_assemblies.
    //
    // Multiple gff3 files can be associated (by tag) with a single fasta file in target_assemblies.
    assembly_gff3           = [
        ["hap1", "/workspace/assembly_qc/test_data/default/test_data1.gff3.gz"],
        ["hap2", "/workspace/assembly_qc/test_data/default/test_data2.gff3"]
    ]
    
    assemblathon_stats {
        // The number of 'N's for the unknown gap size.
        // This number is used to split the scaffolds into contigs
        // to compute contig-related stats such as the number of contigs, N50, etc.
        // NCBI recommendation(https://www.ncbi.nlm.nih.gov/genbank/wgs_gapped/) is 100
        n_limit             = 100
    }

    ncbi_fcs_adaptor {
        skip                = 0 // 1: Skip, 0: Don't

        empire              = 'euk' // euk: Eukaryote, prok: Prokaryote

        // For interpretation of results, see:
        // https://github.com/ncbi/fcs/wiki/FCS-adaptor#rules-for-action-assignment
        //
        // If adaptors are found, the pipeline stops with a report of adaptor contamination
    }

    ncbi_fcs_gx {
        // This is a very slow module. Skip it unless you really need it.
        skip                = 0

        // Get tax ID from https://www.ncbi.nlm.nih.gov/taxonomy
        // Example assembly is from Neonectria ditissima
        tax_id              = "78410"

        // NCBI FCS GX DB path
        // Due to enormity of the DB size, the pipeline does NOT download the data.
        // It must be setup by the user manually before running the pipeline.
        // See instructions for DB setup: https://github.com/ncbi/fcs/wiki/FCS-GX
        // db_manifest_url must match the downloaded DB otherwise the pipeline won't be able to
        // verify the integrity of the DB.
        db_manifest_url     = "https://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/FCS/database/r2023-01-24/all.manifest"
        db_path             = "/workspace/ComparativeDataSources/NCBI/FCS/GX/r2023-01-24"

        // For interpretation of results, see:
        // https://github.com/ncbi/fcs/wiki/FCS-GX#fcs-gx-report-output
    }
    
    busco {
        skip                = 0

        // geno or genome, for genome assemblies (DNA)
        // tran or transcriptome, for transcriptome assemblies (DNA)
        // prot or proteins, for annotated gene sets (protein)
        mode                = "geno"
        
        // BUSCO runs for each assembly in combination with each lineage
        // Full cartesian product: Assembly x Lineage
        //
        // To select a lineage, see https://busco.ezlab.org/list_of_lineages.html
        lineage_datasets    = ["fungi_odb10", "microsporidia_odb10"]

        // BUSCO DB download path
        // The pipeline automatically downloads the required DB if needed
        download_path       = "/workspace/ComparativeDataSources/BUSCO/assembly_qc"
    }

    tidk {
        skip                = 0
        
        // To select an appropriate sequence, see http://telomerase.asu.edu/sequences_telomere.html
        // Plant: TTTAGGG, Fungus, Vertebrates: TTAGGG, Insect: TTAGG
        repeat_seq          = "TTAGGG"

        // 1: Filter assembly sequences by size, 0: Include all assembly sequences in the TIDK plot
        filter_by_size      = 0

        // Filter size in base-pairs. Any sequence smaller than this size is filtered if filter_by_size=1
        // Default: 1000000 (1Mbp)
        filter_size_bp      = 1000000
    }

    lai {
        skip                = 0

        // In calculation of LAI, this module assumes that each assembly specified in
        // the target_assemblies is monoploid (1x) or only contains monoploid sequences.
        // If this is not the case, use the following parameter to supply a single column
        // text file listing IDs of the monoploid sequences for a polyploid assembly included
        // in target_assemblies. The pipeline will only uses these sequences to compute LAI.
        // 
        // This parameter is optional and can be set to [] if not needed.
        //
        // Pattern:
        // monoploid_seqs   = [["tag", "file_path1"], ["tag2", "file_path2"]]
        monoploid_seqs      = []
    }

    kraken2 {
        skip                = 0

        // To select a DB, see https://benlangmead.github.io/aws-indexes/k2
        // Due to enormity of the DB size, the pipeline does NOT download the data.
        //
        // Recommended PlusPFP: archaea, viral, plasmid, human, UniVec_Core, protozoa, fungi & plant
        db_path             = "/workspace/ComparativeDataSources/kraken2db/k2_pluspfp_20230314"
    }

    hic {
        skip                = 0
        
        // A relative or absolute path to paired reads: *_R{1,2}.(fastq|fq).gz
        // OR SRA: SRR8238190
        paired_reads        = "/input/genomic/fungal/Neonectria/Genome/20190506_CAGRF19591_CGYCF_HiC/PG_PETUNIA_HiC_CGYCF_CACTCA_L001_R{1,2}.fastq.gz"
    }

    synteny {
        skip                = 0

        between_target_asm  = 1 // 1: Create syntenic plots between each pair of target_assemblies, 0: Don't

        // Assembly sequence list
        // A two column tab-delimited txt file listing fasta sequence ids (first column) and
        // labels for the synteny plots (second column).
        //
        // Filter sequences: If a sequence is missing from this file, it is excluded from the synteny plot even if
        // it is present in the fasta file.
        //
        // Note: The sequence labels (second column) must be unique across the synteny assemblies.
        // Otherwise, the pipeline fails with an error.
        // 
        // Example tab-delimited file contents are listed here:
        // Nd324_chr_1  ND_1
        // Nd324_chr_2  ND_2
        //
        // Pattern:           [["tag", "path to assembly sequence list"]]
        assembly_seq_list   = [
            ["hap1", "/workspace/assembly_qc/test_data/default/test_data1.seq.list"],
            ["hap2", "/workspace/assembly_qc/test_data/default/test_data2.seq.list"]
        ]
        
        // A list of reference assemblies.
        // Syntenic plots are created between each assembly from target_assemblies and xref_assemblies.
        //
        // Optional           Can be set to [] if not needed such as xref_assemblies = []
        // In this case, the synteny is only performed between target assemblies if between_target_asm is 1.
        //
        // Pattern:           [["tag", "fasta file (fasta, fasta.gz) path", "seq.list file path"]]
        xref_assemblies     = [
            ["GenomeA", "/workspace/assembly_qc/test_data/default/test_data3.fasta", "/workspace/assembly_qc/test_data/default/test_data3.seq.list"],
            ["GenomeB", "/workspace/assembly_qc/test_data/default/test_data4.fasta.gz", "/workspace/assembly_qc/test_data/default/test_data4.seq.list"]
        ]

        // 0: Only include alignment blocks with 1-to-1 mappings (dnadiff .1coords file)
        // 1: Include alignment blocks with many-to-many mappings (dnadiff .mcoords file)
        many_to_many_align  = 0

        max_gap             = 1000000   // 1 Mbp; Alignments within this distance are bundled together
        min_bundle_size     = 1000      // 1 Kbp; After bundling, any bundle smaller than this size is filtered out

        // 1: Create a separate synteny plot for each contig of the target assembly versus all contigs of the reference assembly
        // 0: Only plot synteny for all contigs of target assembly versus all contigs of reference assembly
        plot_1_vs_all       = 1

        // 1: Synteny plot is colored by contig
        // 0: Synteny plot is colored by the number of links in a bundle
        color_by_contig     = 1
    }
    
    outdir                  = "./results"

    
    // The resources are capped at their following maximum values.
    // The pipeline does not use additional resources even if
    // the following values are increased. These values only set the
    // upper bound.
    //
    // To truly increase the max resources above the following values,
    // change the process classes defined in './conf/base.config'.
    max_cpus                = 12

    // NCBI_FCS_GX requires at least 512 GBs
    max_memory              = 512.GB
    
    // SYNTENY::DNADIFF can take up to a week
    //
    // Target and Reference assemblies: 2.5 GB
    // MUMMER .delta file: 1 GB
    // Execution time: 134 hours
    max_time                = 7.days
}

apptainer {
    // This is where the pipeline looks for and stores the singularity
    // containers.
    cacheDir                = "/workspace/assembly_qc/singularity"
}

manifest {
    name                    = "AssemblyQC"
    nextflowVersion         = '!>=22.04.3'
}

includeConfig './conf/module_defaults.config'
includeConfig './conf/reporting_defaults.config'
