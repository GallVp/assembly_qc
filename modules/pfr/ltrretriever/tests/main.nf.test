nextflow_process {

    name "Test Process LTRRETRIEVER"
    script "../main.nf"
    process "LTRRETRIEVER"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "ltrretriever"
    tag "gt/ltrharvest"
    tag "gt/suffixerator"

    test("homo_sapiens-genome_21_fasta-success") {

        setup {
            run("GT_SUFFIXERATOR") {
                script "../../../pfr/gt/suffixerator"

                process {
                    """
                    input[0] = [
                        [ id:'test' ],
                        file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                    ]
                    """
                }
            }

            run("GT_LTRHARVEST") {
                script "../../../pfr/gt/ltrharvest"

                process {
                    """
                    input[0] = GT_SUFFIXERATOR.out.index
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                        [ id:'test' ],
                        file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                input[1] = GT_LTRHARVEST.out.tabout.map { meta, tabout -> tabout }
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.pass_list).match("pass_list") },
                { assert path(process.out.pass_list_gff.get(0).get(1)).getText().contains("chr21\tLTR_retriever\ttarget_site_duplication\t40960698\t40960702") },
                { assert process.out.ltrlib != null },
                { assert process.out.annotation_out == [] },
                { assert process.out.annotation_gff == [] },
                { assert snapshot(process.out.versions).match("versions") }
            )
        }

    }

    test("stub") {

        options '-stub'

        when {
            process {
                """
                input[0] = [
                        [ id:'test' ],
                        file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match("versions") },
                { assert process.out.log != null },
                { assert process.out.pass_list != null },
                { assert process.out.pass_list_gff != null },
                { assert process.out.ltrlib != null },
                { assert process.out.annotation_out == [] },
                { assert process.out.annotation_gff == [] }
            )
        }

    }

}