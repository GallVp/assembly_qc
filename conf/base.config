profiles {
    slurm {
        process {
            executor        = 'slurm'
        }
    }
    
    local {
        process {
            executor        = 'local'
        }
    }
}

process {
    cpus                    = { check_max( 1,       'cpus'   ) }
    memory                  = { check_max( 4.GB,    'memory' ) }
    time                    = { check_max( 1.h,     'time'   ) }

    withLabel:uses_four_cpus {
        cpus                = { check_max( 4,       'cpus'   ) }
    }

    withLabel:uses_high_cpu_mem {
        cpus                = { check_max( 48,      'cpus'   ) }
        memory              = { check_max( 8.GB,    'memory' ) }
    }

    withLabel:uses_150_gb_mem {
        memory              = { check_max( 150.GB,    'memory' ) }
    }

    withLabel:uses_512_gb_mem {
        memory              = { check_max( 512.GB,    'memory' ) }
    }

    withLabel:takes_two_hours {
        time                = { check_max( 2.h,     'time'   ) }
    }
    
    withLabel:takes_eight_hours {
        time                = { check_max( 8.h,     'time'   ) }
    }

    withLabel:takes_three_days {
        time                = { check_max( 3.days,     'time'   ) }
    }
}

singularity {
    enabled                 = true
    autoMounts              = true
}

conda {
    enabled                 = true
}

// Disabled by default till dev is complete
// process {
//     errorStrategy           = 'retry'
//     maxRetries              = 1
// }

// Source: https://github.com/nf-core/rnaseq
// License: https://github.com/nf-core/rnaseq/blob/master/LICENSE
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
