/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: '.*:GFF3_GT_GFF3_GFF3VALIDATOR_STAT:GT_GFF3' {
        ext.args = '-tidy -retainids'
    }

    withName: '.*:GFF3_GT_GFF3_GFF3VALIDATOR_STAT:GT_STAT' {
        ext.args = [
            '-genelengthdistri',
            '-genescoredistri',
            '-exonlengthdistri',
            '-exonnumberdistri',
            '-intronlengthdistri',
            '-cdslengthdistri',
            '-addintrons'
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/genometools_gt_stat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: ASSEMBLATHON_STATS {
        publishDir = [
            path: { "${params.outdir}/assemblathon_stats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: NCBI_FCS_ADAPTOR {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_adaptor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: NCBI_FCS_GX_SCREEN_SAMPLES {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_gx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: NCBI_FCS_GX_KRONA_PLOT {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_gx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: BUSCO {
        publishDir = [
            path: { "${params.outdir}/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: BUSCO_PLOT {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: KRAKEN2_KRONA_PLOT {
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: CIRCOS {
        publishDir = [
            path: { "${params.outdir}/synteny/${target_on_ref_seq}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: LINEARSYNTENY {
        publishDir = [
            path: { "${params.outdir}/synteny/${target_on_ref_seq}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }



    withName: FILTER_BY_LENGTH {
        ext.args = params.tidk_filter_by_size ? "-m ${params.tidk_filter_size_bp}" : ''
        ext.prefix = { "${meta.id}.filtered" }
    }

    withName: SORT_BY_LENGTH {
        ext.args = '--quiet --reverse --by-length'
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: TIDK_EXPLORE {
        ext.args = '--minimum 5 --maximum 30'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_SEARCH_APRIORI {
        ext.prefix = { "${meta.id}.apriori" }
        ext.args = '--extension tsv'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_SEARCH_APOSTERIORI {
        ext.prefix = { "${meta.id}.aposteriori" }
        ext.args = '--extension tsv'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_PLOT_APRIORI {
        ext.prefix = { "${meta.id}.apriori" }
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_PLOT_APOSTERIORI {
        ext.prefix = { "${meta.id}.aposteriori" }
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: CUSTOM_SHORTENFASTAIDS {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            pattern: '*.short.ids.tsv'
        ]
    }

    withName: LTRHARVEST {
        ext.prefix = { "${meta.id}_ltrharvest" }
    }

    withName: LTRFINDER {
        ext.args = '-harvest_out -size 1000000 -time 300'
    }

    withName: '.*:FASTA_LTRRETRIEVER_LAI:CAT_CAT' {
        ext.prefix = { "${meta.id}_ltrharvest_ltrfinder.tabout" }
    }

    withName: LTRRETRIEVER_LTRRETRIEVER {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            pattern: '*.LTRlib.fa'
        ]
    }

    withName: CUSTOM_RESTOREGFFIDS {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: LTRRETRIEVER_LAI {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:DOWNLOAD_HIC:SRATOOLS_FASTERQDUMP' {
        ext.prefix = { "${meta.id}.sra.fastq" }
    }

    withName: FASTQC_RAW {
        publishDir = [
            path: { "${params.outdir}/hic/fastqc_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: FASTQC_TRIM {
        publishDir = [
            path: { "${params.outdir}/hic/fastqc_trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: FASTP {
        ext.args = params.hic_fastp_ext_args
        publishDir = [
            path: { "${params.outdir}/hic/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:FQ2HIC:SEQKIT_SORT' {
        ext.args = '--ignore-case --natural-order'
    }

    withName: BWA_MEM {
        ext.prefix = { "${meta.id}.on.${meta.ref_id}.bwa.mem" }
        ext.args = '-5SP'
    }

    withName: SAMBLASTER {
        ext.prefix = { "${meta.id}.on.${meta.ref_id}.samblaster" }
        ext.args3 = '-h -F 2316'
    }

    withName: AGP2ASSEMBLY {
        publishDir = [
            path: { "${params.outdir}/hic/assembly" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: ASSEMBLY2BEDPE {
        publishDir = [
            path: { "${params.outdir}/hic/bedpe" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: HIC2HTML {
        publishDir = [
            path: { "${params.outdir}/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: HICQC {
        publishDir = [
            path: { "${params.outdir}/hic/hicqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: RUNASSEMBLYVISUALIZER {
        publishDir = [
            path: { "${params.outdir}/hic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TAG_ASSEMBLY {
        ext.prefix = { "${meta.id}.fasta" }
    }

    withName: '.*:DOWNLOAD_READS:SRATOOLS_FASTERQDUMP' {
        ext.prefix = { "${meta.id}.sra.fastq" }
    }

    withName: FASTK_FASTK {
        ext.args = "-k$params.merqury_kmer_length -t1"
    }

    withName: MERQURYFK_MERQURYFK {
        publishDir = [
            [
                path: { "${params.outdir}/merquryfk/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.qv'
            ],
            [
                path: { "${params.outdir}/merquryfk/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.completeness.stats'
            ],
            [
                path: { "${params.outdir}/merquryfk/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.*.spectra-cn.fl.png'
            ]
        ]
    }

    withName: CREATEREPORT {
        publishDir = [
            path: { "$params.outdir" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }
}
