if(!params.tidk.skip) {
    process {

        withName: FILTER_BY_LENGTH {
            ext.args = params.tidk.filter_by_size ? "-m ${params.tidk.filter_size_bp}" : ''
            ext.prefix = { "${meta.id}.filtered" }
        }

        withName: SORT_BY_LENGTH {
            ext.args = '--quiet --reverse --by-length'
            ext.prefix = { "${meta.id}.sorted" }
        }

        withName: TIDK_EXPLORE {
            ext.args = '--minimum 5 --maximum 30'
            publishDir = [
                path: { "${params.outdir}/tidk" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: TIDK_SEARCH_APRIORI {
            ext.prefix = { "${meta.id}.apriori" }
            ext.args = '--extension tsv'
            publishDir = [
                path: { "${params.outdir}/tidk" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: TIDK_SEARCH_APOSTERIORI {
            ext.prefix = { "${meta.id}.aposteriori" }
            ext.args = '--extension tsv'
            publishDir = [
                path: { "${params.outdir}/tidk" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: TIDK_PLOT_APRIORI {
            ext.prefix = { "${meta.id}.apriori" }
            publishDir = [
                path: { "${params.outdir}/tidk" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: TIDK_PLOT_APOSTERIORI {
            ext.prefix = { "${meta.id}.aposteriori" }
            publishDir = [
                path: { "${params.outdir}/tidk" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }
    }
}


if(!params.lai.skip) {
    process {

        withName: CUSTOM_SHORTENFASTAIDS {
            publishDir = [
                path: { "${params.outdir}/lai" },
                mode: "copy",
                pattern: '*.short.ids.tsv'
            ]
        }

        withName: EDTA_LTRHARVEST {
            ext.prefix = { "${meta.id}_edta_ltrharvest" }
        }

        withName: LTRFINDER {
            ext.args = '-harvest_out -size 1000000 -time 300'
        }

        withName: CAT_CAT {
            ext.prefix = { "${meta.id}_ltrharvest_ltrfinder.tabout" }
        }

        withName: LTRRETRIEVER {
            publishDir = [
                path: { "${params.outdir}/lai" },
                mode: "copy",
                pattern: '*.LTRlib.fa'
            ]
        }

        withName: CUSTOM_RESTOREGFFIDS {
            publishDir = [
                path: { "${params.outdir}/lai" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: LAI {
            publishDir = [
                path: { "${params.outdir}/lai" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }
    }
}

if(!params.hic.skip){
    process {

        withName: FASTQC_RAW {
            publishDir = [
                path: { "${params.outdir}/hic/fastqc_raw" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: FASTQC_TRIM {
            publishDir = [
                path: { "${params.outdir}/hic/fastqc_trim" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: FASTP {
            ext.args = params.hic.fastp_ext_args
            publishDir = [
                path: { "${params.outdir}/hic/fastp" },
                mode: "copy",
                saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
            ]
        }

        withName: BWA_MEM {
            ext.prefix = { "${meta.id}.on.${meta.ref_id}.bwa.mem" }
            ext.args = '-5SP'
        }

        withName: SAMBLASTER {
            ext.prefix = { "${meta.id}.on.${meta.ref_id}.samblaster" }
            ext.args3 = '-h -F 2316'
        }
    }
}
