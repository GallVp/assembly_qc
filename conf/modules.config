process {
    withName: ASSEMBLATHON_STATS {
        publishDir = [
            path: { "${params.outdir}/assemblathon_stats" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: NCBI_FCS_ADAPTOR {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_adaptor" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: RUN_BUSCO {
        publishDir = [
            path: { "${params.outdir}/busco" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: RUN_KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/kraken2" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: '.*:NCBI_FCS_GX:SCREEN_SAMPLES' {
        publishDir = [
            path: { "${params.outdir}/ncbi_fcs_gx" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: CIRCOS {
        publishDir = [
            path: { "${params.outdir}/synteny/${target_on_ref_seq}" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }
}


process {
    withName: '.*:GFF3_VALIDATE:GT_GFF3' {
        ext.args = '-tidy -retainids'
    }

    withName: GT_STAT {
        ext.args = [
            '-genelengthdistri',
            '-genescoredistri',
            '-exonlengthdistri',
            '-exonnumberdistri',
            '-intronlengthdistri',
            '-cdslengthdistri',
            '-addintrons'
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/genometools_gt_stat" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }
}

process {

    withName: FILTER_BY_LENGTH {
        ext.args = params.tidk.filter_by_size ? "-m ${params.tidk.filter_size_bp}" : ''
        ext.prefix = { "${meta.id}.filtered" }
    }

    withName: SORT_BY_LENGTH {
        ext.args = '--quiet --reverse --by-length'
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: TIDK_EXPLORE {
        ext.args = '--minimum 5 --maximum 30'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_SEARCH_APRIORI {
        ext.prefix = { "${meta.id}.apriori" }
        ext.args = '--extension tsv'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_SEARCH_APOSTERIORI {
        ext.prefix = { "${meta.id}.aposteriori" }
        ext.args = '--extension tsv'
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_PLOT_APRIORI {
        ext.prefix = { "${meta.id}.apriori" }
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: TIDK_PLOT_APOSTERIORI {
        ext.prefix = { "${meta.id}.aposteriori" }
        publishDir = [
            path: { "${params.outdir}/tidk" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }
}


process {

    withName: CUSTOM_SHORTENFASTAIDS {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: "copy",
            pattern: '*.short.ids.tsv'
        ]
    }

    withName: EDTA_LTRHARVEST {
        ext.prefix = { "${meta.id}_edta_ltrharvest" }
    }

    withName: LTRFINDER {
        ext.args = '-harvest_out -size 1000000 -time 300'
    }

    withName: CAT_CAT {
        ext.prefix = { "${meta.id}_ltrharvest_ltrfinder.tabout" }
    }

    withName: LTRRETRIEVER {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: "copy",
            pattern: '*.LTRlib.fa'
        ]
    }

    withName: CUSTOM_RESTOREGFFIDS {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: LAI {
        publishDir = [
            path: { "${params.outdir}/lai" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }
}

process {

    withName: FASTQC_RAW {
        publishDir = [
            path: { "${params.outdir}/hic/fastqc_raw" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: FASTQC_TRIM {
        publishDir = [
            path: { "${params.outdir}/hic/fastqc_trim" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: FASTP {
        ext.args = params.hic.fastp_ext_args
        publishDir = [
            path: { "${params.outdir}/hic/fastp" },
            mode: "copy",
            saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
        ]
    }

    withName: BWA_MEM {
        ext.prefix = { "${meta.id}.on.${meta.ref_id}.bwa.mem" }
        ext.args = '-5SP'
    }

    withName: SAMBLASTER {
        ext.prefix = { "${meta.id}.on.${meta.ref_id}.samblaster" }
        ext.args3 = '-h -F 2316'
    }
}
